#!/usr/bin/env python3
"""
Environment Setup Helper for Recipe Automation System
Helps users set up their .env file with API keys
"""

import os
import sys
from pathlib import Path

def create_env_file():
    """Create .env file with user input"""
    
    print("🔧 Recipe Automation System - Environment Setup")
    print("=" * 50)
    
    # Check if .env already exists
    if os.path.exists('.env'):
        print("⚠️  .env file already exists!")
        response = input("Do you want to overwrite it? (y/N): ")
        if response.lower() != 'y':
            print("Setup cancelled.")
            return False
    
    print("\n📝 Setting up environment variables...")
    print("You'll need your OpenAI API key for this system to work.")
    print("Get it from: https://platform.openai.com/api-keys")
    print()
    
    # Get OpenAI API key
    openai_key = input("Enter your OpenAI API key: ").strip()
    if not openai_key:
        print("❌ OpenAI API key is required!")
        return False
    
    # Get USDA API key (required)
    print("\nUSDA API key is required for nutrition analysis")
    print("Get it from: https://fdc.nal.usda.gov/api-key-signup.html")
    usda_key = input("Enter your USDA API key: ").strip()
    if not usda_key:
        print("❌ USDA API key is required!")
        return False
    
    # Create .env file
    env_content = f"""# Recipe Automation System - Environment Variables
# Generated by setup_env.py

# OpenAI API Key (Required for Vision API OCR and content generation)
OPENAI_API_KEY={openai_key}

# USDA API Key (Required for nutrition analysis)
USDA_API_KEY={usda_key}

# Optional: Override default settings
# OPENAI_MODEL=gpt-4
# OPENAI_TEMPERATURE=0.4
# BATCH_SIZE=5
"""
    
    try:
        with open('.env', 'w') as f:
            f.write(env_content)
        
        print("\n✅ .env file created successfully!")
        print("📁 File location: .env")
        print("\n🔒 Security note: .env is already in .gitignore and won't be committed to git")
        
        return True
        
    except Exception as e:
        print(f"❌ Failed to create .env file: {e}")
        return False

def test_environment():
    """Test if environment variables are loaded correctly"""
    print("\n🧪 Testing environment setup...")
    
    try:
        from dotenv import load_dotenv
        load_dotenv()
        
        openai_key = os.getenv('OPENAI_API_KEY')
        usda_key = os.getenv('USDA_API_KEY')
        
        if openai_key:
            print("✅ OPENAI_API_KEY found")
        else:
            print("❌ OPENAI_API_KEY not found")
            return False
        
        if usda_key:
            print("✅ USDA_API_KEY found")
        else:
            print("❌ USDA_API_KEY not found")
            return False
        
        return True
        
    except Exception as e:
        print(f"❌ Environment test failed: {e}")
        return False

def main():
    """Main setup function"""
    
    # Create .env file
    if not create_env_file():
        sys.exit(1)
    
    # Test environment
    if not test_environment():
        print("\n❌ Environment setup failed!")
        sys.exit(1)
    
    print("\n🎉 Environment setup complete!")
    print("\n📋 Next steps:")
    print("1. Place recipe images in the Original-Images/ directory")
    print("2. Run: python test_system.py")
    print("3. If tests pass, run: python recipe_automation_v2.py")
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 